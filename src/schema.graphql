type User {
  id: ID!
  name: String!
  email: String
  password: String!
  posts: [Post!]!
  updatedAt: String!
  createdAt: String!
}

type Post {
  id: ID! 
  title: String!
  body: String!
  published: Boolean!
  author: User!
}

type Comment {
  id: ID! 
  text: String!
  author: ID!
  post: ID!
}

type Query {
    users(query: String, first: Int, skip: Int, after: String): [User!]!
    posts(query: String, first: Int, skip: Int, after: String): [Post!]!
    comments(query: String): [Comment!]!
    myPosts(query: String): [Post!]!
    post(id: ID!): Post!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String,
  email: String,
  password: String
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
}

input UpdatePostInput{
  title: String!
  body: String!
  published: Boolean!
}

input CreateCommentInput {
  text: String!
  post: ID!
}

input UpdateCommentInput {
  text: String
}

type AuthPayload {
  token: String!
  user: User!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload
  deleteUser: User!
  updateUser(data: UpdateUserInput): User!
  createPost(data: CreatePostInput!): Post!
  updatePost(id: ID!, data: UpdatePostInput!): Post!
  deletePost(id: ID!): Post!
  createComment(data: CreateCommentInput!): Comment!
  updateComment(id: ID!, data: UpdateCommentInput!) : Comment!
  deleteComment(id: ID!): Comment!
  login(data: LoginInput!): AuthPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type CommentSubscriptionPayload {
  mutation: MutationType,
  node: Comment
}

type PostSubscriptionPayload {
  mutation: MutationType,
  node: Post
}


type Subscription {
  comment(postId: ID!): CommentSubscriptionPayload
  post: PostSubscriptionPayload
  myPost: PostSubscriptionPayload
}


